plugins {
    // apply false 单独使用Spring Boot的依赖管理
    id 'org.springframework.boot' version '2.1.6.RELEASE' apply false
    // Gradle 3.4+ 使用java-library插件替换java插件
    id 'java-library'
}

apply plugin: 'io.spring.dependency-management'

apply from: '../deploy.gradle'


group = 'org.chance'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

repositories {
    // 本地maven仓库
    mavenLocal()
    maven { url localMavenRepo }
    // 阿里的源
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

// 单独使用Spring Boot的依赖管理
dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'ScalaFilebeat',
                'Implementation-Version': version
    }
}

/**
 * api和implementation两种依赖的不同点在于：它们声明的依赖其他模块是否能使用。
 *
 * api：当其他模块依赖于此模块时，此模块使用api声明的依赖包是可以被其他模块使用
 * implementation：当其他模块依赖此模块时，此模块使用implementation声明的依赖包只限于模块内部使用，不允许其他模块使用。
 */
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}