package org.chance.pattern.structural.flyweight;

/**
 * 享元模式
 * 享元模式（Flyweight），运用共享技术有效地支持大量细粒度的对象。第一个想到的应该就是池技术了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，所以说享元模式是池技术的重要实现方式。
 * 享元模式其实就是工厂模式的一个改进机制，享元模式同样要求创建一个或一组对象，并且就是通过工厂方法生成对象的，只不过 享元模式中为工厂方法增加了缓存这一功能。
 * <p>
 * # 角色
 * Flyweight:是抽象享元角色。它是产品的抽象类，同时定义出对象的外部状态和内部状态（外部状态及内部状态相关内容见后方）的接口或实现；
 * ConcreteFlyweight:是具体享元角色，是具体的产品类，实现抽象角色定义的业务；
 * UnsharedConcreteFlyweight:是不可共享的享元角色，一般不会出现在享元工厂中；
 * FlyweightFactory:是享元工厂，它用于构造一个池容器，同时提供从池中获得对象的方法。
 * <p>
 * # 优缺点
 * - 3. 优点
 * 大大减少了对象的创建，降低了程序内存的占用，提高效率
 * - 4. 缺点
 * 提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变
 * <p>
 * # 组合模式的应用
 * - 维护和展示部分-整体关系的场景（如树形菜单、文件和文件夹管理）
 * - 从一个整体中能够独立出部分模块或功能的场景
 *
 * @author GengChao &lt;catchance@163.com&gt;
 * @date 2020-07-07 19:07:53
 */
public class FlyweightPattern {

}
