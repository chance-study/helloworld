package org.chance.pattern.structural.composite;

/**
 * 组合模式
 * 组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。
 * 这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。
 * <p>
 * # 角色
 * Component：是对象声明接口，在适当情况下，实现所有类共有接口的默认行为；
 * Composite：是树枝节点对象，用来存储部件，组合树枝节点和叶子节点形成一个树形结构。
 * Leaf：是叶子节点对象，其没有子节点；
 * <p>
 * # 组合模式之透明模式：参见pattern1包
 * 透明模式是把组合使用的方法放到抽象类中，不管叶子对象还是树枝对象都有相同的结构，这样做的好处就是叶子节点和树枝节点对于外界没有区别，它们具备完全一致的行为接口。但因为Leaf类本身不具备add()、remove()方法的功能，所以实现它是没有意义的。
 * <p>
 * # 组合模式之安全模式 参见pattern2包
 * 安全模式是把树枝节点和树叶节点彻底分开，树枝节点单独拥有用来组合的方法，这种方法比较安全。但由于不够透明，所以树叶节点和树枝节点将不具有相同的接口，客户端的调用需要做相应的判断，带来了不便。
 * <p>
 * # 应用实例：
 * 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。
 * 2、数据库的数据池。
 *
 * @author GengChao &lt;catchance@163.com&gt;
 * @date 2020-07-07 19:07:53
 */
public class CompositePattern {

}
